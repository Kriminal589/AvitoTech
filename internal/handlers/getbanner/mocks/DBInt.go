// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	models "AvitoTech/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// DBInt is an autogenerated mock type for the DBInt type
type DBInt struct {
	mock.Mock
}

type DBInt_Expecter struct {
	mock *mock.Mock
}

func (_m *DBInt) EXPECT() *DBInt_Expecter {
	return &DBInt_Expecter{mock: &_m.Mock}
}

// GetBanners provides a mock function with given fields: featureID, tagID, limit, offset
func (_m *DBInt) GetBanners(featureID uint64, tagID uint64, limit int, offset int) ([]models.Banner, error) {
	ret := _m.Called(featureID, tagID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetBanners")
	}

	var r0 []models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, int, int) ([]models.Banner, error)); ok {
		return rf(featureID, tagID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64, int, int) []models.Banner); ok {
		r0 = rf(featureID, tagID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Banner)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64, int, int) error); ok {
		r1 = rf(featureID, tagID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInt_GetBanners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBanners'
type DBInt_GetBanners_Call struct {
	*mock.Call
}

// GetBanners is a helper method to define mock.On call
//   - featureID uint64
//   - tagID uint64
//   - limit int
//   - offset int
func (_e *DBInt_Expecter) GetBanners(featureID interface{}, tagID interface{}, limit interface{}, offset interface{}) *DBInt_GetBanners_Call {
	return &DBInt_GetBanners_Call{Call: _e.mock.On("GetBanners", featureID, tagID, limit, offset)}
}

func (_c *DBInt_GetBanners_Call) Run(run func(featureID uint64, tagID uint64, limit int, offset int)) *DBInt_GetBanners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *DBInt_GetBanners_Call) Return(_a0 []models.Banner, _a1 error) *DBInt_GetBanners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInt_GetBanners_Call) RunAndReturn(run func(uint64, uint64, int, int) ([]models.Banner, error)) *DBInt_GetBanners_Call {
	_c.Call.Return(run)
	return _c
}

// GetBannersByFeatureID provides a mock function with given fields: featureID, limit, offset
func (_m *DBInt) GetBannersByFeatureID(featureID uint64, limit int, offset int) ([]models.Banner, error) {
	ret := _m.Called(featureID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetBannersByFeatureID")
	}

	var r0 []models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, int, int) ([]models.Banner, error)); ok {
		return rf(featureID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint64, int, int) []models.Banner); ok {
		r0 = rf(featureID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Banner)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, int, int) error); ok {
		r1 = rf(featureID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInt_GetBannersByFeatureID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBannersByFeatureID'
type DBInt_GetBannersByFeatureID_Call struct {
	*mock.Call
}

// GetBannersByFeatureID is a helper method to define mock.On call
//   - featureID uint64
//   - limit int
//   - offset int
func (_e *DBInt_Expecter) GetBannersByFeatureID(featureID interface{}, limit interface{}, offset interface{}) *DBInt_GetBannersByFeatureID_Call {
	return &DBInt_GetBannersByFeatureID_Call{Call: _e.mock.On("GetBannersByFeatureID", featureID, limit, offset)}
}

func (_c *DBInt_GetBannersByFeatureID_Call) Run(run func(featureID uint64, limit int, offset int)) *DBInt_GetBannersByFeatureID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *DBInt_GetBannersByFeatureID_Call) Return(_a0 []models.Banner, _a1 error) *DBInt_GetBannersByFeatureID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInt_GetBannersByFeatureID_Call) RunAndReturn(run func(uint64, int, int) ([]models.Banner, error)) *DBInt_GetBannersByFeatureID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBannersByTagID provides a mock function with given fields: tagID, limit, offset
func (_m *DBInt) GetBannersByTagID(tagID uint64, limit int, offset int) ([]models.Banner, error) {
	ret := _m.Called(tagID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetBannersByTagID")
	}

	var r0 []models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, int, int) ([]models.Banner, error)); ok {
		return rf(tagID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint64, int, int) []models.Banner); ok {
		r0 = rf(tagID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Banner)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, int, int) error); ok {
		r1 = rf(tagID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInt_GetBannersByTagID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBannersByTagID'
type DBInt_GetBannersByTagID_Call struct {
	*mock.Call
}

// GetBannersByTagID is a helper method to define mock.On call
//   - tagID uint64
//   - limit int
//   - offset int
func (_e *DBInt_Expecter) GetBannersByTagID(tagID interface{}, limit interface{}, offset interface{}) *DBInt_GetBannersByTagID_Call {
	return &DBInt_GetBannersByTagID_Call{Call: _e.mock.On("GetBannersByTagID", tagID, limit, offset)}
}

func (_c *DBInt_GetBannersByTagID_Call) Run(run func(tagID uint64, limit int, offset int)) *DBInt_GetBannersByTagID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *DBInt_GetBannersByTagID_Call) Return(_a0 []models.Banner, _a1 error) *DBInt_GetBannersByTagID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInt_GetBannersByTagID_Call) RunAndReturn(run func(uint64, int, int) ([]models.Banner, error)) *DBInt_GetBannersByTagID_Call {
	_c.Call.Return(run)
	return _c
}

// NewDBInt creates a new instance of DBInt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBInt(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBInt {
	mock := &DBInt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
