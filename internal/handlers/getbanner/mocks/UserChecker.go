// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"

	mock "github.com/stretchr/testify/mock"
)

// UserChecker is an autogenerated mock type for the UserChecker type
type UserChecker struct {
	mock.Mock
}

type UserChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *UserChecker) EXPECT() *UserChecker_Expecter {
	return &UserChecker_Expecter{mock: &_m.Mock}
}

// IsAdmin provides a mock function with given fields: c
func (_m *UserChecker) IsAdmin(c *fiber.Ctx) (bool, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for IsAdmin")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) (bool, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) bool); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*fiber.Ctx) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserChecker_IsAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAdmin'
type UserChecker_IsAdmin_Call struct {
	*mock.Call
}

// IsAdmin is a helper method to define mock.On call
//   - c *fiber.Ctx
func (_e *UserChecker_Expecter) IsAdmin(c interface{}) *UserChecker_IsAdmin_Call {
	return &UserChecker_IsAdmin_Call{Call: _e.mock.On("IsAdmin", c)}
}

func (_c *UserChecker_IsAdmin_Call) Run(run func(c *fiber.Ctx)) *UserChecker_IsAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *UserChecker_IsAdmin_Call) Return(_a0 bool, _a1 error) *UserChecker_IsAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserChecker_IsAdmin_Call) RunAndReturn(run func(*fiber.Ctx) (bool, error)) *UserChecker_IsAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserChecker creates a new instance of UserChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserChecker {
	mock := &UserChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
